apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-kapt'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0

archivesBaseName = 'sdk-search'

def propOrEmpty(String name) {
  return hasProperty(name) ? getProperty(name) : ''
}

// TODO make these incremental(ish) by persisting to a file in buildDir
def gitSha() {
  def p = 'git rev-parse HEAD'.execute([], project.rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

def gitTimestamp() {
  def p = 'git log -n 1 --format=%at'.execute([], rootDir)
  p.waitFor()
  if (p.exitValue() != 0) {
    throw new RuntimeException(p.errorStream.text)
  }

  return p.text.trim()
}

android {
  compileSdkVersion buildConfig.compileSdk

  defaultConfig {
    applicationId 'com.jakewharton.sdksearch'

    minSdkVersion buildConfig.minSdk
    targetSdkVersion buildConfig.targetSdk

    versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField 'String', 'BUGSNAG_API_KEY', "\"${propOrEmpty('SDK_SEARCH_BUGSNAG_API_KEY')}\""
    buildConfigField 'boolean', 'IS_CI_BUILD', 'false' // May be overridden by a build type.
    buildConfigField 'String', 'COMMIT_SHA', "\"${gitSha()}\""
    buildConfigField 'long', 'COMMIT_TIMESTAMP', gitTimestamp().toString()
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  lintOptions {
    textReport true
    textOutput 'stdout'

    // We run a full lint analysis as build part in CI, so skip vital checks for assemble task.
    checkReleaseBuilds false
  }

  signingConfigs {
    debug {
      storeFile rootProject.file('debug.keystore')
      storePassword 'sdksearch'
      keyAlias 'sdksearch'
      keyPassword 'sdksearch'
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
      signingConfig signingConfigs.debug

      buildConfigField 'String', 'CIRCLE_CI_TOKEN', "\"${propOrEmpty('SDK_SEARCH_CIRCLE_CI_TOKEN')}\""
      buildConfigField 'boolean', 'IS_CI_BUILD', isCiBuild.toString()
    }
    release {
      signingConfig signingConfigs.debug // TODO temporary

      minifyEnabled true
      proguardFiles(
          file('src/main/proguard-android.pro'),
          file('src/main/proguard-app.pro')
      )
    }
  }

  packagingOptions {
    exclude 'kotlin/**'
    exclude 'META-INF/*.kotlin_module'
    exclude 'META-INF/*.version'
  }
}

dependencies {
  implementation project(':api:dac')
  implementation project(':db')

  debugImplementation project(':api:circleci')
  debugImplementation deps.okio
  debugImplementation deps.android.support.coreUtils

  implementation deps.kotlin.stdlib

  implementation deps.android.support.annotations
  implementation deps.android.support.recyclerView
  implementation deps.android.support.customTabs
  implementation deps.android.support.constraintLayout

  implementation deps.rx.java
  implementation deps.rx.android
  implementation deps.rx.binding.framework

  implementation deps.timber

  implementation deps.bugsnag
}
