apply plugin: 'org.jetbrains.kotlin.multiplatform'

archivesBaseName = 'references'

// TODO work around https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

kotlin {
  sourceSets {
    commonMain {
      dependencies {
        api deps.kotlin.stdlib.common
      }
    }
    commonTest {
      dependencies {
        implementation deps.kotlin.test.common
        implementation deps.kotlin.test.annotations
      }
    }
    jvmMain {
      dependencies {
        api deps.kotlin.stdlib.jdk
      }
    }
    jvmTest {
      dependencies {
        implementation deps.kotlin.test.jdk
      }
    }
    jsMain {
      dependencies {
        api deps.kotlin.stdlib.js
      }
    }
    jsTest {
      dependencies {
        implementation deps.kotlin.test.js
      }
    }
  }

  targets {
    fromPreset(presets.jvm, 'jvm')
    fromPreset(presets.js, 'js') {
      // TODO apply this automatically on all multiplatform projects using js presets.
      configure([compilations.main, compilations.test]) {
        tasks.getByName(compileKotlinTaskName).kotlinOptions {
          sourceMap = true
          moduleKind = 'umd'
          metaInfo = true
        }
      }
    }
  }
}

// TODO run this automatically on all projects applying multiplatform plugin.
def jsTargets = kotlin.targets.matching { it.platformType.name == 'js' }
if (!jsTargets.isEmpty()) {
  apply plugin: 'com.moowork.node'

  node {
    nodeModulesDir = buildDir
  }

  def npmInstallMocha = tasks.create('npmInstallMocha', NpmTask) {
    args = ['install', 'mocha@6.1.4', 'source-map-support@0.5.3', 'mocha-junit-reporter@1.23.0', '--no-save']
  }

  jsTargets.all { target->
    def mainCompilation = target.compilations['main']
    def mainCompilationTask = tasks[mainCompilation.compileKotlinTaskName]

    def testCompilation = target.compilations['test']
    def testCompilationTask = tasks[testCompilation.compileKotlinTaskName]

    // Combine all required compilation results in the node_modules folder
    // - main compilation result (compileKotlinJs)
    // - all runtime dependencies of test sourceset
    def dependenciesTask = task("aggregate${target.name}TestDependencies", type: Sync) {
      from(mainCompilationTask.destinationDir)
      into("$node.nodeModulesDir/node_modules")

      def configuration = testCompilation.runtimeDependencyFiles
      from(files {
        configuration.collect { File file ->
          file.name.endsWith('.jar') ?
              zipTree(file.absolutePath).matching {
                include '*.js'
                include '*.js.map'
              } :
              files()
        }
      }.builtBy(configuration))
    }
    dependenciesTask.dependsOn(mainCompilationTask)
    npmInstallMocha.dependsOn(dependenciesTask)

    def mochaTask = task("${target.name}TestWithMocha", type: NodeTask) {
      group = 'verification'
      description = "Runs tests with Mocha for 'test' compilation of target '${target.name}'"

      script = file("$node.nodeModulesDir/node_modules/mocha/bin/mocha")
      def results = new File(buildDir, 'test-results/jsTest/test-results.xml')
      args = [
          testCompilationTask.outputFile,
          '--require', 'source-map-support/register',
          '--reporter', 'mocha-junit-reporter',
          '--reporter-options', "mochaFile=$results.absolutePath"
      ]
    }
    mochaTask.dependsOn(testCompilationTask, npmInstallMocha)

    tasks.getByName("${target.name}Test").dependsOn(mochaTask)
  }
}
